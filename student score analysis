{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN1R3tLjZtcDErlU2pr+tsl",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dk127119/notebook/blob/main/student%20score%20analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53rGcz8No3gh",
        "outputId": "8fcf9c65-e50f-4d25-b0ee-83ecf91a3221"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.25.2)\n"
          ]
        }
      ],
      "source": [
        "#pip install numpy\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pip install pandas\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y0_xcm5Go-zE",
        "outputId": "bff6f487-043c-4f50-8029-7322f448f4f6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pip install matplotlib"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B4wX4ARypXOp",
        "outputId": "3f94efd0-cdfa-43b5-8437-2ddaec4aefe2"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pip install seaborn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y8mRcP4spaYC",
        "outputId": "63a232c3-360f-485d-dc48-0fe1a41bcbc5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.1)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.25.2)\n",
            "Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.0.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.50.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "rqD0KPRfpcIK"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/Expanded_data_with_more_features.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 583
        },
        "id": "9LsWpXoyp5aO",
        "outputId": "2e561aec-0d7b-4476-db94-8412d3971d82"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Unnamed: 0  Gender EthnicGroup          ParentEduc     LunchType  \\\n",
              "0               0  female         NaN   bachelor's degree      standard   \n",
              "1               1  female     group C        some college      standard   \n",
              "2               2  female     group B     master's degree      standard   \n",
              "3               3    male     group A  associate's degree  free/reduced   \n",
              "4               4    male     group C        some college      standard   \n",
              "...           ...     ...         ...                 ...           ...   \n",
              "30636         816  female     group D         high school      standard   \n",
              "30637         890    male     group E         high school      standard   \n",
              "30638         911  female         NaN         high school  free/reduced   \n",
              "30639         934  female     group D  associate's degree      standard   \n",
              "30640         960    male     group B        some college      standard   \n",
              "\n",
              "        TestPrep ParentMaritalStatus PracticeSport IsFirstChild  NrSiblings  \\\n",
              "0           none             married     regularly          yes         3.0   \n",
              "1            NaN             married     sometimes          yes         0.0   \n",
              "2           none              single     sometimes          yes         4.0   \n",
              "3           none             married         never           no         1.0   \n",
              "4           none             married     sometimes          yes         0.0   \n",
              "...          ...                 ...           ...          ...         ...   \n",
              "30636       none              single     sometimes           no         2.0   \n",
              "30637       none              single     regularly           no         1.0   \n",
              "30638  completed             married     sometimes           no         1.0   \n",
              "30639  completed             married     regularly           no         3.0   \n",
              "30640       none             married         never           no         1.0   \n",
              "\n",
              "      TransportMeans WklyStudyHours  MathScore  ReadingScore  WritingScore  \n",
              "0         school_bus            < 5         71            71            74  \n",
              "1                NaN         5 - 10         69            90            88  \n",
              "2         school_bus            < 5         87            93            91  \n",
              "3                NaN         5 - 10         45            56            42  \n",
              "4         school_bus         5 - 10         76            78            75  \n",
              "...              ...            ...        ...           ...           ...  \n",
              "30636     school_bus         5 - 10         59            61            65  \n",
              "30637        private         5 - 10         58            53            51  \n",
              "30638        private         5 - 10         61            70            67  \n",
              "30639     school_bus         5 - 10         82            90            93  \n",
              "30640     school_bus         5 - 10         64            60            58  \n",
              "\n",
              "[30641 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e1a8533c-cede-4b7b-b4fa-502cace504ee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Gender</th>\n",
              "      <th>EthnicGroup</th>\n",
              "      <th>ParentEduc</th>\n",
              "      <th>LunchType</th>\n",
              "      <th>TestPrep</th>\n",
              "      <th>ParentMaritalStatus</th>\n",
              "      <th>PracticeSport</th>\n",
              "      <th>IsFirstChild</th>\n",
              "      <th>NrSiblings</th>\n",
              "      <th>TransportMeans</th>\n",
              "      <th>WklyStudyHours</th>\n",
              "      <th>MathScore</th>\n",
              "      <th>ReadingScore</th>\n",
              "      <th>WritingScore</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>bachelor's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>married</td>\n",
              "      <td>regularly</td>\n",
              "      <td>yes</td>\n",
              "      <td>3.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>&lt; 5</td>\n",
              "      <td>71</td>\n",
              "      <td>71</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>NaN</td>\n",
              "      <td>married</td>\n",
              "      <td>sometimes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>69</td>\n",
              "      <td>90</td>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>female</td>\n",
              "      <td>group B</td>\n",
              "      <td>master's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>single</td>\n",
              "      <td>sometimes</td>\n",
              "      <td>yes</td>\n",
              "      <td>4.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>&lt; 5</td>\n",
              "      <td>87</td>\n",
              "      <td>93</td>\n",
              "      <td>91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>group A</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>none</td>\n",
              "      <td>married</td>\n",
              "      <td>never</td>\n",
              "      <td>no</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>45</td>\n",
              "      <td>56</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>male</td>\n",
              "      <td>group C</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>married</td>\n",
              "      <td>sometimes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>76</td>\n",
              "      <td>78</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30636</th>\n",
              "      <td>816</td>\n",
              "      <td>female</td>\n",
              "      <td>group D</td>\n",
              "      <td>high school</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>single</td>\n",
              "      <td>sometimes</td>\n",
              "      <td>no</td>\n",
              "      <td>2.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>59</td>\n",
              "      <td>61</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30637</th>\n",
              "      <td>890</td>\n",
              "      <td>male</td>\n",
              "      <td>group E</td>\n",
              "      <td>high school</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>single</td>\n",
              "      <td>regularly</td>\n",
              "      <td>no</td>\n",
              "      <td>1.0</td>\n",
              "      <td>private</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>58</td>\n",
              "      <td>53</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30638</th>\n",
              "      <td>911</td>\n",
              "      <td>female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>high school</td>\n",
              "      <td>free/reduced</td>\n",
              "      <td>completed</td>\n",
              "      <td>married</td>\n",
              "      <td>sometimes</td>\n",
              "      <td>no</td>\n",
              "      <td>1.0</td>\n",
              "      <td>private</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>61</td>\n",
              "      <td>70</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30639</th>\n",
              "      <td>934</td>\n",
              "      <td>female</td>\n",
              "      <td>group D</td>\n",
              "      <td>associate's degree</td>\n",
              "      <td>standard</td>\n",
              "      <td>completed</td>\n",
              "      <td>married</td>\n",
              "      <td>regularly</td>\n",
              "      <td>no</td>\n",
              "      <td>3.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>82</td>\n",
              "      <td>90</td>\n",
              "      <td>93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30640</th>\n",
              "      <td>960</td>\n",
              "      <td>male</td>\n",
              "      <td>group B</td>\n",
              "      <td>some college</td>\n",
              "      <td>standard</td>\n",
              "      <td>none</td>\n",
              "      <td>married</td>\n",
              "      <td>never</td>\n",
              "      <td>no</td>\n",
              "      <td>1.0</td>\n",
              "      <td>school_bus</td>\n",
              "      <td>5 - 10</td>\n",
              "      <td>64</td>\n",
              "      <td>60</td>\n",
              "      <td>58</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30641 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e1a8533c-cede-4b7b-b4fa-502cace504ee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e1a8533c-cede-4b7b-b4fa-502cace504ee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e1a8533c-cede-4b7b-b4fa-502cace504ee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-67c8c7ed-bac6-4fea-bdb6-8318c14cb9c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67c8c7ed-bac6-4fea-bdb6-8318c14cb9c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-67c8c7ed-bac6-4fea-bdb6-8318c14cb9c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_fad8694f-2dda-4748-aee0-ea5023a9dc64\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fad8694f-2dda-4748-aee0-ea5023a9dc64 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 30641,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 0,\n        \"max\": 999,\n        \"num_unique_values\": 1000,\n        \"samples\": [\n          549,\n          773,\n          776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EthnicGroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"group B\",\n          \"group E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ParentEduc\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"bachelor's degree\",\n          \"some college\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LunchType\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"free/reduced\",\n          \"standard\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TestPrep\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"completed\",\n          \"none\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ParentMaritalStatus\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PracticeSport\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"regularly\",\n          \"sometimes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"IsFirstChild\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NrSiblings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4582424759686543,\n        \"min\": 0.0,\n        \"max\": 7.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TransportMeans\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"private\",\n          \"school_bus\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WklyStudyHours\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"< 5\",\n          \"5 - 10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MathScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 100,\n        \"num_unique_values\": 95,\n        \"samples\": [\n          36,\n          70\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ReadingScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 100,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          48,\n          65\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WritingScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 4,\n        \"max\": 100,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          10,\n          76\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F9ggr0Y-rAok",
        "outputId": "68029993-7f60-4614-e00e-ebe16415c17e"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Unnamed: 0  Gender EthnicGroup          ParentEduc     LunchType TestPrep  \\\n",
            "0           0  female         NaN   bachelor's degree      standard     none   \n",
            "1           1  female     group C        some college      standard      NaN   \n",
            "2           2  female     group B     master's degree      standard     none   \n",
            "3           3    male     group A  associate's degree  free/reduced     none   \n",
            "4           4    male     group C        some college      standard     none   \n",
            "\n",
            "  ParentMaritalStatus PracticeSport IsFirstChild  NrSiblings TransportMeans  \\\n",
            "0             married     regularly          yes         3.0     school_bus   \n",
            "1             married     sometimes          yes         0.0            NaN   \n",
            "2              single     sometimes          yes         4.0     school_bus   \n",
            "3             married         never           no         1.0            NaN   \n",
            "4             married     sometimes          yes         0.0     school_bus   \n",
            "\n",
            "  WklyStudyHours  MathScore  ReadingScore  WritingScore  \n",
            "0            < 5         71            71            74  \n",
            "1         5 - 10         69            90            88  \n",
            "2            < 5         87            93            91  \n",
            "3         5 - 10         45            56            42  \n",
            "4         5 - 10         76            78            75  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "NzRDsgo_r95-",
        "outputId": "7f73855d-c9a3-43ed-9237-2bf4551f49e3"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Unnamed: 0    NrSiblings     MathScore  ReadingScore  WritingScore\n",
              "count  30641.000000  29069.000000  30641.000000  30641.000000  30641.000000\n",
              "mean     499.556607      2.145894     66.558402     69.377533     68.418622\n",
              "std      288.747894      1.458242     15.361616     14.758952     15.443525\n",
              "min        0.000000      0.000000      0.000000     10.000000      4.000000\n",
              "25%      249.000000      1.000000     56.000000     59.000000     58.000000\n",
              "50%      500.000000      2.000000     67.000000     70.000000     69.000000\n",
              "75%      750.000000      3.000000     78.000000     80.000000     79.000000\n",
              "max      999.000000      7.000000    100.000000    100.000000    100.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35b97b45-2531-4ff1-bd56-ee8b897bdbd7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>NrSiblings</th>\n",
              "      <th>MathScore</th>\n",
              "      <th>ReadingScore</th>\n",
              "      <th>WritingScore</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>30641.000000</td>\n",
              "      <td>29069.000000</td>\n",
              "      <td>30641.000000</td>\n",
              "      <td>30641.000000</td>\n",
              "      <td>30641.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>499.556607</td>\n",
              "      <td>2.145894</td>\n",
              "      <td>66.558402</td>\n",
              "      <td>69.377533</td>\n",
              "      <td>68.418622</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>288.747894</td>\n",
              "      <td>1.458242</td>\n",
              "      <td>15.361616</td>\n",
              "      <td>14.758952</td>\n",
              "      <td>15.443525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>249.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>56.000000</td>\n",
              "      <td>59.000000</td>\n",
              "      <td>58.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>500.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>69.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>750.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>79.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>999.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35b97b45-2531-4ff1-bd56-ee8b897bdbd7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35b97b45-2531-4ff1-bd56-ee8b897bdbd7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35b97b45-2531-4ff1-bd56-ee8b897bdbd7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e03e101-b150-4954-835e-f1e14b247aad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e03e101-b150-4954-835e-f1e14b247aad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e03e101-b150-4954-835e-f1e14b247aad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10671.681928672424,\n        \"min\": 0.0,\n        \"max\": 30641.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          499.5566071603407,\n          500.0,\n          30641.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NrSiblings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10276.60508653049,\n        \"min\": 0.0,\n        \"max\": 29069.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.1458942516082424,\n          2.0,\n          29069.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MathScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10813.938124618964,\n        \"min\": 0.0,\n        \"max\": 30641.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          66.5584021409223,\n          67.0,\n          30641.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ReadingScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10812.912200605591,\n        \"min\": 10.0,\n        \"max\": 30641.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          69.37753337032082,\n          70.0,\n          30641.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WritingScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10813.383566214232,\n        \"min\": 4.0,\n        \"max\": 30641.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          68.41862210763357,\n          69.0,\n          30641.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N0p8YhV3s9c8",
        "outputId": "a4f72ae8-94b1-41e2-dc3a-8b4d78210c9c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 30641 entries, 0 to 30640\n",
            "Data columns (total 15 columns):\n",
            " #   Column               Non-Null Count  Dtype  \n",
            "---  ------               --------------  -----  \n",
            " 0   Unnamed: 0           30641 non-null  int64  \n",
            " 1   Gender               30641 non-null  object \n",
            " 2   EthnicGroup          28801 non-null  object \n",
            " 3   ParentEduc           28796 non-null  object \n",
            " 4   LunchType            30641 non-null  object \n",
            " 5   TestPrep             28811 non-null  object \n",
            " 6   ParentMaritalStatus  29451 non-null  object \n",
            " 7   PracticeSport        30010 non-null  object \n",
            " 8   IsFirstChild         29737 non-null  object \n",
            " 9   NrSiblings           29069 non-null  float64\n",
            " 10  TransportMeans       27507 non-null  object \n",
            " 11  WklyStudyHours       29686 non-null  object \n",
            " 12  MathScore            30641 non-null  int64  \n",
            " 13  ReadingScore         30641 non-null  int64  \n",
            " 14  WritingScore         30641 non-null  int64  \n",
            "dtypes: float64(1), int64(4), object(10)\n",
            "memory usage: 3.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xr-CC_jHs_W8",
        "outputId": "bd67b5bc-d438-4cd9-bd3f-bb75a52e2702"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Unnamed: 0                0\n",
              "Gender                    0\n",
              "EthnicGroup            1840\n",
              "ParentEduc             1845\n",
              "LunchType                 0\n",
              "TestPrep               1830\n",
              "ParentMaritalStatus    1190\n",
              "PracticeSport           631\n",
              "IsFirstChild            904\n",
              "NrSiblings             1572\n",
              "TransportMeans         3134\n",
              "WklyStudyHours          955\n",
              "MathScore                 0\n",
              "ReadingScore              0\n",
              "WritingScore              0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Unnamed: 0"
      ],
      "metadata": {
        "id": "pYh9ukoPvN1y"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(\"Unnamed: 0\" , axis=1)"
      ],
      "metadata": {
        "id": "9Pl8zMERvveB"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WsFTsS-jv03P",
        "outputId": "1e897201-71fb-4ff4-92e8-bf22373ffc02"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Gender EthnicGroup          ParentEduc     LunchType TestPrep  \\\n",
            "0  female         NaN   bachelor's degree      standard     none   \n",
            "1  female     group C        some college      standard      NaN   \n",
            "2  female     group B     master's degree      standard     none   \n",
            "3    male     group A  associate's degree  free/reduced     none   \n",
            "4    male     group C        some college      standard     none   \n",
            "\n",
            "  ParentMaritalStatus PracticeSport IsFirstChild  NrSiblings TransportMeans  \\\n",
            "0             married     regularly          yes         3.0     school_bus   \n",
            "1             married     sometimes          yes         0.0            NaN   \n",
            "2              single     sometimes          yes         4.0     school_bus   \n",
            "3             married         never           no         1.0            NaN   \n",
            "4             married     sometimes          yes         0.0     school_bus   \n",
            "\n",
            "  WklyStudyHours  MathScore  ReadingScore  WritingScore  \n",
            "0            < 5         71            71            74  \n",
            "1         5 - 10         69            90            88  \n",
            "2            < 5         87            93            91  \n",
            "3         5 - 10         45            56            42  \n",
            "4         5 - 10         76            78            75  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#gender distribution\n",
        "plt.figure(figsize = (5,5))\n",
        "ax = sns.countplot(data = df, x= 'Gender')\n",
        "ax.bar_label(ax.containers[0])\n",
        "plt.title(\"Gender distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "_VQUoEyYw2_W",
        "outputId": "d50f76dd-858a-4591-d8ba-552a02c17ce2"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from the above we have anlaysis that:\n",
        "# the number of female in data is more than male\n",
        "gb = df.groupby(\"ParentEduc\").agg({\"MathScore\" : \"mean\", \"ReadingScore\": \"mean\", \"WritingScore\" : \"mean\"})\n",
        "print(gb)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xachuI5XzdPa",
        "outputId": "e981fadc-0ea0-4d00-df4a-fe87e96f0f30"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                    MathScore  ReadingScore  WritingScore\n",
            "ParentEduc                                               \n",
            "associate's degree  68.365586     71.124324     70.299099\n",
            "bachelor's degree   70.466627     73.062020     73.331069\n",
            "high school         64.435731     67.213997     65.421136\n",
            "master's degree     72.336134     75.832921     76.356896\n",
            "some college        66.390472     69.179708     68.501432\n",
            "some high school    62.584013     65.510785     63.632409\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (3,3))\n",
        "sns.heatmap(gb, annot=True)\n",
        "plt.title(\"Relationship between Parents Eduction and Student score \")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "yzhkjJtR1a4P",
        "outputId": "81e0a18a-7fe9-4fdb-b375-68b05f37d650"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from the above chart we have concluded that the education of the parents hav egood impact on thier kids\n"
      ],
      "metadata": {
        "id": "SX-H_2Co2UGx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "gb1 = df.groupby(\"ParentMaritalStatus\").agg({\"MathScore\" : \"mean\", \"ReadingScore\": \"mean\", \"WritingScore\" : \"mean\"})\n",
        "print(gb1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Umj6yGqg4Ae8",
        "outputId": "755a415a-1a08-457e-acaf-7ff7b38ad478"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                     MathScore  ReadingScore  WritingScore\n",
            "ParentMaritalStatus                                       \n",
            "divorced             66.691197     69.655011     68.799146\n",
            "married              66.657326     69.389575     68.420981\n",
            "single               66.165704     69.157250     68.174440\n",
            "widowed              67.368866     69.651438     68.563452\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize = (3,3))\n",
        "sns.heatmap(gb1, annot=True)\n",
        "plt.title(\"Difference between Parent Marital status of Parent vs Score \")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "tbzHP7cY4HM3",
        "outputId": "29c0787e-f0ce-43c6-b67c-e0999ba5235a"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#from the abpve chart we have concluded that the marital status of the parents have not or negligible  impact on thier kids"
      ],
      "metadata": {
        "id": "kJCMqD6d4Uyj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data = df, x = \"MathScore\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "2UroZ0u66shW",
        "outputId": "1c7d310f-b384-40e4-b61e-604c373368f6"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data = df, x = \"ReadingScore\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "MVRz363365w-",
        "outputId": "ef483da1-2aed-4e75-a074-da16f76dec8e"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(data = df, x = \"WritingScore\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "g-KsdQPP7CK-",
        "outputId": "b049dee7-3ec4-4f89-9f6c-73128a280284"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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det6c7j22mslSf3799fEiRO9sbds2aK5c+d65/3lL39RfHy8nn766YBQ7NKli/7973978wRQPRz7dQNnp3IHwj333ON9Jyz99xmE1NTUCk8gISFBkrR582a1bNnS7N+8ebMkKSUlpVzHHR3vZOMfu+3nx/18+9KlS9W9e3dz3qZNm8wxx5736quv6rLLLpMkJSYmqqioSK+//rr27dsXcMyjjz6qOXPmeNteeOEFb11DQ0NVVlamqVOn6uDBgwGf17Rp0xQfHx9wXlZWlmbMmBEw/rZt2wLOe+GFF9SoUSPv49dff1233XabXnrppYCxi4uLA86bNWuWdx1FRESEt/2jjz7y/n/q1KkCTsXWrVt5QKpi7rvvPtWvXz/Y0zhrVYV/E+UOhIiIiIAHhsrSunVrJScna+bMmXr44YcDXj7w+/2aOXOm6tatq549e2ru3Lm/eNzRty6ebPyj246+hn7seUfHSkpK0o8//qgXX3xR3bp1U1hYWMB569atU2hoqPx+v1588UVdccUV3nm7d+/WihUr9M033yg0NFSPP/64evXq5X2nfdSKFSu0d+/egAfZvLw8750WL774om6++WZt2bLF2z958mQNGzZMhYWFAS/z5OXl6dtvv/VeXjg6/lHPPfechgwZor179wY8W+L3+7V69eqAbceOO3bsWD344IMqKyvzxj56rcOOHTu8axnGjh3LFc9ANVK/fn3+TZ/lgn6RYmhoqIYMGaKlS5fq/vvv19q1a3XgwAGtXbtW999/v5YuXarbb79d4eHh5Tru51fXH2/80tJSde/eXUuXLvW++y8tLQ0Ya+jQoerdu7f27dun3r1765133tG+ffvUvn17LV26VPn5+crKylKvXr20b98+XXnllfrss8/Ut29f710MhYWFOvfcc7Vjx44TvouhV69ecs4pNTU14N0IISEh2rhxo1mvn7+EIv3/uxgGDhwYcP6x+48cORJwzrH7hw8ffsL759i3gB41f/58de7cWTfeeKO3jesPAKB6qdI/B6Fu3bq6/fbbf/HnIBzvuPKMHx8fL+dcwIPgz8fi5yCUD++ZRkXwcxCqDn4OQtVQFX4OQpX5SYqdOnVSx44df/GnGpb3uPKOL538Jynedttt6t+/Pz9J8QQ/SdHv93NxIgBUQ1XmGQT8Np3OysXZg2cQqg6eQagaqsIzCEG/BgEA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hvj9fj344IOqV6+eIiIi1KZNG73//vveuVu2bJHP59M///lPZWZmKjIyUjNnzpQkTZ8+Xeeff74iIyPVvHlzPffccxW6TwCcGIEAnEFZWVnKycnxPs7JydHll1+uzMxMb3tJSYmWL1+urKwsSdKCBQu0fv16ffjhh5o/f74ZMzc3V5I0Y8YM7dq1y/v4eHJycvTdd98pJydHr7zyil5++WW9/PLL3v6bbrpJO3fu1KJFizR37lxNnTo14KWD5ORkHTlyRG+88YZO9Hvevv/+e3Xq1EkRERFauHChVq1apf79+3svrTz11FOaNGmSJk6cqDVr1qhr167q0aOHNm7cGDDO6NGjdeedd2rdunXq2rWrZs6cqbFjxyo7O1vr1q3T+PHjNWbMGL3yyisnW3IAp6rSfz8kgBOaNm2aq1mzpjt8+LArLCx0YWFhbs+ePW7WrFmuU6dOzjnnFixY4CS5rVu3un79+rmkpKSAX7nrnHP169d3TzzxhPexJPfGG28EHDNu3Dh34YUXeh/369fP1a9f3x05csTb1rt3b3fdddc555xbt26dk+Ryc3O9/Rs3bnSSAm7r3nvvdWFhYS4hIcF169bNPfrooy4vL8/bf88997j09HR36NCh465BSkqKy87ODth2ySWXuCFDhjjnnNu8ebOT5J588smAYxo1auRmzZoVsO2hhx5yGRkZx70dABXDMwjAGXT55Zdr//79ys3N1ZIlS9S0aVOde+65yszM9K5DWLRokRo2bKi0tDRJUqtWrRQeHl4pt9+yZUuFhoZ6H9etW9d7hmD9+vUKCwvTRRdd5O1v3Lix4uPjA8bIzs5WXl6epkyZopYtW2rKlClq3ry5vvzyS0nS6tWrddlll6lGjRrm9gsLC7Vz50517NgxYHvHjh21bt26gG3t2rXz/n///v367rvvNGDAANWqVcv78/DDD5/wQk4AFRMW7AkAZ5PGjRurXr16ysnJ0b59+5SZmSlJSklJUWpqqj777DPl5OToD3/4g3dOzZo1K+32f/6g7fP55Pf7f/U4iYmJ6t27t3r37q3x48erbdu2mjhxol555RVFRUVVylyP/byLi4slSdOmTVOHDh0Cjjs2eABUHp5BAM6wrKwsLVq0SIsWLQp4e2OnTp303nvvacWKFd71B+VVo0YNlZWVVWhezZo105EjR/T5559727799lvt27fvpOeFh4erUaNG3rsYWrdurSVLlhz3nQcxMTFKSUnRp59+GrD9008/VYsWLU54G0lJSUpJSdGmTZvUuHHjgD/HXhwJoPLwDAJwhmVlZXnvHjj6DIIkZWZmatiwYTp06NCvDoQGDRpowYIF6tixoyIiIszLAuXRvHlzdenSRYMHD9bzzz+vGjVqaOTIkYqKipLP55MkzZ8/X7Nnz9b111+vpk2byjmnd955R++++65mzJghSRo2bJieeeYZXX/99brnnnsUGxurZcuWqX379mrWrJlGjRqlcePGqVGjRmrTpo1mzJih1atXe+9UOJEHHnhAd9xxh2JjY9WtWzeVlpZq5cqV2rdvn0aMGPGrP18AJ0cgAGdYVlaWSkpK1Lx5cyUlJXnbMzMzVVRU5L0d8teYNGmSRowYoWnTpum8887Tli1bTmlur776qgYMGKBOnTopOTlZEyZM0Nq1axUZGSlJatGihaKjozVy5Eht375dERERatKkiaZPn66+fftK+u/LDwsXLtSoUaOUmZmp0NBQtWnTxrvu4I477lBBQYFGjhypPXv2qEWLFnr77bfVpEmTk85t4MCBio6O1mOPPaZRo0apZs2aatWqlYYPH35KnyuAk/M5d4L3KgE46+3YsUOpqan66KOP1Llz52BPB8AZRCAA8CxcuFDFxcVq1aqVdu3apbvvvlvff/+9NmzYcNx3JQCovniJAYDn8OHDuvfee7Vp0ybVrl1bl156qWbOnEkcAGchnkEAAAAGb3MEAAAGgQAAAAwCAQAAGAQCAAAwCAQAAGAQCAAAwCAQAACAQSAAAADjfwHjpD++IqD9kQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df[\"EthnicGroup\"].unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lHt5GoQ_7FFM",
        "outputId": "153cf8ce-6dd9-4b2d-98f5-25641fc137b6"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[nan 'group C' 'group B' 'group A' 'group D' 'group E']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupA = df.loc[(df[\"EthnicGroup\"] == \"group A\")].count()\n",
        "print(groupA)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vstj1RGn90ZD",
        "outputId": "6b5e518c-569e-4193-f1d8-b1e37184154d"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender                 2219\n",
            "EthnicGroup            2219\n",
            "ParentEduc             2078\n",
            "LunchType              2219\n",
            "TestPrep               2081\n",
            "ParentMaritalStatus    2121\n",
            "PracticeSport          2167\n",
            "IsFirstChild           2168\n",
            "NrSiblings             2096\n",
            "TransportMeans         1999\n",
            "WklyStudyHours         2146\n",
            "MathScore              2219\n",
            "ReadingScore           2219\n",
            "WritingScore           2219\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupB = df.loc[(df[\"EthnicGroup\"] == \"group B\")].count()\n",
        "print(groupB)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uc-Bps4Z-K2L",
        "outputId": "48f1fa04-81b3-4b80-f266-20612c0b315d"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender                 5826\n",
            "EthnicGroup            5826\n",
            "ParentEduc             5470\n",
            "LunchType              5826\n",
            "TestPrep               5488\n",
            "ParentMaritalStatus    5605\n",
            "PracticeSport          5704\n",
            "IsFirstChild           5649\n",
            "NrSiblings             5546\n",
            "TransportMeans         5238\n",
            "WklyStudyHours         5642\n",
            "MathScore              5826\n",
            "ReadingScore           5826\n",
            "WritingScore           5826\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupC = df.loc[(df[\"EthnicGroup\"] == \"group C\")].count()\n",
        "print(groupC)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lGSSCn4j-vnw",
        "outputId": "d68ac43e-f28a-4a09-edaf-117ae67f41e3"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender                 9212\n",
            "EthnicGroup            9212\n",
            "ParentEduc             8652\n",
            "LunchType              9212\n",
            "TestPrep               8652\n",
            "ParentMaritalStatus    8858\n",
            "PracticeSport          9050\n",
            "IsFirstChild           8929\n",
            "NrSiblings             8763\n",
            "TransportMeans         8280\n",
            "WklyStudyHours         8933\n",
            "MathScore              9212\n",
            "ReadingScore           9212\n",
            "WritingScore           9212\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupD = df.loc[(df[\"EthnicGroup\"] == \"group D\")].count()\n",
        "print(groupD)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gmm8JH9y-04N",
        "outputId": "1855b396-1a70-40b4-dd26-b5f6f75550c3"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender                 7503\n",
            "EthnicGroup            7503\n",
            "ParentEduc             7056\n",
            "LunchType              7503\n",
            "TestPrep               7070\n",
            "ParentMaritalStatus    7218\n",
            "PracticeSport          7343\n",
            "IsFirstChild           7285\n",
            "NrSiblings             7106\n",
            "TransportMeans         6713\n",
            "WklyStudyHours         7270\n",
            "MathScore              7503\n",
            "ReadingScore           7503\n",
            "WritingScore           7503\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupE = df.loc[(df[\"EthnicGroup\"] == \"group E\")].count()\n",
        "print(groupE)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "229K9gV6-4Cv",
        "outputId": "3ed10493-7840-416b-aeed-17f883ee2867"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gender                 4041\n",
            "EthnicGroup            4041\n",
            "ParentEduc             3814\n",
            "LunchType              4041\n",
            "TestPrep               3804\n",
            "ParentMaritalStatus    3892\n",
            "PracticeSport          3954\n",
            "IsFirstChild           3918\n",
            "NrSiblings             3820\n",
            "TransportMeans         3624\n",
            "WklyStudyHours         3924\n",
            "MathScore              4041\n",
            "ReadingScore           4041\n",
            "WritingScore           4041\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "groupA = df.loc[(df[\"EthnicGroup\"] == \"group A\")].count()\n",
        "groupB = df.loc[(df[\"EthnicGroup\"] == \"group B\")].count()\n",
        "groupC = df.loc[(df[\"EthnicGroup\"] == \"group C\")].count()\n",
        "groupD = df.loc[(df[\"EthnicGroup\"] == \"group D\")].count()\n",
        "groupE = df.loc[(df[\"EthnicGroup\"] == \"group E\")].count()\n",
        "\n",
        "l = ['group A', 'group B', 'group C', 'group D', 'group E']\n",
        "mylist = [groupA['EthnicGroup'], groupB['EthnicGroup'], groupC['EthnicGroup'], groupD['EthnicGroup'], groupE['EthnicGroup']]\n",
        "\n",
        "print(mylist)\n",
        "plt.pie(mylist, labels = l, autopct = \"%1.2f%%\")\n",
        "plt.title(\"Distrubution of Ethnic Group\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        },
        "id": "gxAul2by-8pP",
        "outputId": "ca7783c1-a3b4-4f51-f9a8-dd536ed9a413"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2219, 5826, 9212, 7503, 4041]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.countplot(data = df, x = \"EthnicGroup\")\n",
        "ax.bar_label(ax.containers[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "id": "36BRPAgPCHfJ",
        "outputId": "74a00860-37c2-4adc-cd12-ed73cbdbe1e0"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0, 0, '9212'),\n",
              " Text(0, 0, '5826'),\n",
              " Text(0, 0, '2219'),\n",
              " Text(0, 0, '7503'),\n",
              " Text(0, 0, '4041')]"
            ]
          },
          "metadata": {},
          "execution_count": 82
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vWLrvbbbFIP6"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}